[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "Isuru Dassanayake is an Assistant Professor of Statistics at George Mason University, Fairfax, VA, USA. He received his PhD in Mathematics majoring in Statistics and a Master of Science in Statistics from Texas Tech University.\nHis research interests include Machine Learning, Statistics Computing, Heteroscedastic Mixed Effects Models, Spatial data analysis, Bayesian Statistics, and High dimensional data analysis. His dissertation was mainly focused on Exploring Social and Economic Predictors for US Government Elections using advanced Statistical Modeling and Machine Learning techniques (including Neural Networks and Data Visualization tools: ggplot, Tableau, Plotly, etc) to investigate the capacity to maintain the stability of the United States Government after an election.\nPrior to joining George Mason University, he worked as a Graduate Part-Time instructor at Texas Tech University and as a Lecturer at the University of Peradeniya, Sri Lanka. He teaches probability & statistics for engineering and scientists 1 (STAT344) and applied statistics & visualization for analytics (STAT515).\n\n\nPhD, Mathematics with a concentration in Statistics, Texas Tech University\nMS, Statistics, Texas Tech University\nBS, Statistics, University Peradeniya, Sri Lanka\n\n\n\nMachine Learning, Statistics Computing, Heteroscedastic Mixed Effects Models, Spatial data analysis, Bayesian Statistics, High dimensional data analysis\n\n\n\nCampus: Fairfax\nBuilding: Nguyen Engineering Building Room 1727 Mail Stop: 4A7\n\n \n  \n   \n  \n    \n     LinkedIn\n  \n  \n    \n     Email"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "",
    "text": "PhD, Mathematics with a concentration in Statistics, Texas Tech University\nMS, Statistics, Texas Tech University\nBS, Statistics, University Peradeniya, Sri Lanka"
  },
  {
    "objectID": "index.html#research-interests",
    "href": "index.html#research-interests",
    "title": "About Me",
    "section": "",
    "text": "Machine Learning, Statistics Computing, Heteroscedastic Mixed Effects Models, Spatial data analysis, Bayesian Statistics, High dimensional data analysis"
  },
  {
    "objectID": "index.html#contact-information",
    "href": "index.html#contact-information",
    "title": "About Me",
    "section": "",
    "text": "Campus: Fairfax\nBuilding: Nguyen Engineering Building Room 1727 Mail Stop: 4A7"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a demo website…."
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows, and MacOS. R can be downloaded from CRAN (Comprehensive R Archive Network) at http://cran.r-project.org/. One should prefer the sixty-four bit version, which can handle arbitrarily large amounts of data."
  },
  {
    "objectID": "Introduction.html#general-remarks",
    "href": "Introduction.html#general-remarks",
    "title": "Introduction to R and RStudio",
    "section": "General Remarks:",
    "text": "General Remarks:\n• Commands in R are written following the \\(\"&gt;\"\\) prompt. Once we are done writing the command, we hit Enter to move to the new command line. The space in which we put the commands is called the console.\n• R is interactive – results can be seen one command at a time. If there is an incorrect entry in a line of code, R will immediately let us know of this fact – we do not have to wait until all the commands are entered.\n• R is case-sensitive. So, uv, Uv, uV, and UV are all different variables.\n• We can always add comments to an R program by starting the statement with the # symbol. • To repeat a line of code, we just press the up arrow key.\n• To interrupt a command, we have to press Esc.\n• To get help on any function we type ? and the name of the function. For example, to get help on the function mean, we type:\n\n&gt;?mean\n\nFor operations we use \\(‘ ‘\\). For example, to get help on \\(+,\\) we type:\n\n&gt;? '+'\n\n• There may be occasions when we have only a sense of the function we want to use. In that case, we can look up the function by using a part of its name along with the function “apropos”. For example, say we do not know the exact name of the mean function, but we think it starts with m, e , and a:\n\n&gt;apropos (“mea”)\n\n• To copy the session commands and their results to a Word document, simply select and highlight these lines, and Copy and Paste. To copy a graph, after creating the graph, click on Export and then choose the option Copy to Clipboard. Click on Copy Plot. Then go to the Word document and paste."
  },
  {
    "objectID": "Introduction.html#rstudio",
    "href": "Introduction.html#rstudio",
    "title": "Introduction to R and RStudio",
    "section": "RStudio",
    "text": "RStudio\nRStudio is an integrated development environment (IDE) for R, that is, it is a software application that consolidates the basic tools needed to write and test R programs.\nTo download Rstudio, after downloading R, go to http://www.rstudio.com/download\n\nBasic Operations and Functions:\nAs usual, we use + for addition, - for subtraction, * for multiplication, / for division, ^ for powers, and sqrt for the square root. For the rth root of a number x, we simply write x^(1⁄r). To get the whole number part in a division we write x%/%y and to get the remainder we write \\(x%/%y\\). So for example,\n\n17%/%3\n\n[1] 5\n\n\nand\n\n17%%3\n\n[1] 2\n\n\nThus,\n\nx = y*(x%/%y)+(x%%y)\n17 = 3*(17%/%3) + (17%%3)\n\nR follows the usual order of operations: parenthesis, exponents, multiplications, and divisions from left to right, and finally additions and subtractions from left to right.\nWe can write some common functions very easily in R. We use abs(x) for the absolute value, exp(x) for e^x, and log(x) for the natural logarithm of x. To write log_a (x), we write loga(x). So, the common logarithms, log_10 (x), is written as log10(x). To write e, the base of the natural logarithmic function, we write exp(1).\nWe write pi for \\(\\pi\\). The trigonometric functions are written as \\(sin(x)\\), \\(cos(x),\\) tan⁡($x), etc. Here, the argument x given in radians. The inverse trigonometric functions are written as acos(x), asin(x), atan(x), etc. The function atan2(y,x) gives the angle (in radians) from the positive x-axis to the vector (x,y).\nRecall that the floor function is the function that takes as input a real number x and gives as output the greatest integer less than or equal to x. It is denoted as ⌊x⌋. Similarly, the ceiling function gives the least integer greater than or equal to x, and is denoted as \\(⌈x⌉\\). Thus, for example, ⌊3.2⌋=3 ⌈3.2⌉=4 Of course, for any integer n, ⌊n⌋=⌈n⌉=n\nTo get these functions in R, we write:\n\nfloor(x)\n\n#and\n\nceiling(x)\n\n  #### Basic Arithmetic Statements:\nTo perform any arithmetic operation, at the &gt; prompt, we write down the operational statement and hit enter.\n\n1 + 2*3 - 15/3 \n\n[1] 2\n\nlog(3*5-7)\n\n[1] 2.079442\n\n\n \n\nVariables\nA variable name can be any combination of alphanumeric characters along with period “.” and underscore “_”. It must start with a letter. To assign a value to a variable we use &lt;- symbol (or =). Thus, to assign the value 3 to variable x, we write:\n\nx &lt;- 3\n\n#or \n\nx = 3\n\nif then we write x we get its value:\n\nx\n\n[1] 3\n\n\nAssignments can be done simultaneously:\n\na &lt;- b &lt;- 7\n\na\n\n[1] 7\n\nb\n\n[1] 7\n\n\nAnother method is to use the assign function:\n\nassign ('h', 4)\n\nh\n\n[1] 4\n\n\nTo remove a variable we use the remove or rm function:\n\nj = 4\n\nj\n\n[1] 4\n\n\n\nrm(j)\n\nj\n\nError in eval(expr, envir, enclos): object 'j' not found\n\n\n \n\n\n\nData Types\nWe will discuss numeric, character (string), and logical (true/false) data.\n \n\nNumeric Data\nAny real number stored in a variable is automatically assumed to be numeric. To test whether a variable is numeric we use the “is.numeric” function. So, if for example, x is a numeric variable,\n\nis.numeric(x)\n\n[1] TRUE\n\n\nA sub-category of numeric is integer. To set an integer value to a variable, it is necessary to append the value with an “L”. To check whether a variable is integer, we use the is.integer function.\n\ng = 5L \ng\n\n[1] 5\n\n#or\nl = as.integer(5)\nl\n\n[1] 5\n\nis.integer(g)\n\n[1] TRUE\n\n\n \n\n\nCharacter Data\nCharacter data is always entered in quotes:\n\nx = \"table\"\n\nx\n\n[1] \"table\"\n\n\nNotice in this case the answer is also given in quotes.\n \n\n\nLogicals\nThese are ways of representing data that can be either true or false. Numerically TRUE is same as 1 and FALSE is same as 0.\n\nTRUE*5\n\n[1] 5\n\nFALSE*7\n\n[1] 0\n\n\nWe can test whether a data is logical by using the “is.logical” function\n\nk = TRUE\n\nclass(k)\n\n[1] \"logical\"\n\nis.logical(k)\n\n[1] TRUE\n\n\n \n\n\nBinary Comparisons\na is equal to b: a = = b\na is less than b: a &lt; b\na is greater than b: a &gt; b\na is less than or equal to b: a &lt; = b\na is greater than or equal to b: a&gt;=b\na is not equal to b: a != b\n\n# Let's check if 2 is equal to 3\n\n2==3\n\n[1] FALSE\n\n\n\n# Let's check if 4 is not equal to 5\n\n4!=5\n\n[1] TRUE\n\n\n \n\n\n\nVectors\nIn R, a vector is defined as a collection of elements, all of which are of the same type. There is no distinction between a column vector and a row vector.\nThe most common way to create a vector is with c (c stands for combine) function: to create a vector $ x_1,x_2,…,x_k$ we write: \\(c(x_1,x_2,…,x_k)\\) So, for example:\n\nx = c(1,2,3,4,5)\nx\n\n[1] 1 2 3 4 5\n\n\n\ny = c (\"alpha\",\"beta\",\"gamma\",\"delta\")\ny\n\n[1] \"alpha\" \"beta\"  \"gamma\" \"delta\"\n\n\nSuppose \\(x = c(x_1,x_2,…,x_k)\\).\nIf we write: \\(y = c(y_1,…,y_j,x)\\)\nthis will give us the vector \\((y_1,…,y_j, x_1,x_2,…,x_k)\\).\nSo if,\n\nx = c(7,8,9,10)\n\ny= c(1,2,3,4,5,6,x)\n\nz = c(\"a\",\"b\",\"c\")\n\nm = c(x,z)\n\nn =as.integer(x)\nn\n\n[1]  7  8  9 10\n\nclass(n)\n\n[1] \"integer\"\n\n\n \n\nThe : Operator\nIf a vector is formed by consecutive numbers from a to b, a&lt;b, we can simply write: a:b,\nSo for example:\n\n1:6\n\n[1] 1 2 3 4 5 6\n\n-2:2\n\n[1] -2 -1  0  1  2\n\n# also in decreasing order from b to a ==&gt;  b:a\n\n10:2\n\n[1] 10  9  8  7  6  5  4  3  2\n\n# Also,\n\nx = 1:9\nx\n\n[1] 1 2 3 4 5 6 7 8 9\n\ny = 10*x # every element on x will be multiplied by 10\n\ny\n\n[1] 10 20 30 40 50 60 70 80 90\n\n\n \n\n\nVector Operations\nOperations are applied to each element of the vector automatically, without the need to loop through the vector.\nTo multiply each element of a vector by a number n, enter the vector in x and then x*n.\nSimilarly we can perform operations x+n, x⁄n, x^n, or sqrt (x).\n\nx = c(3,7,11,25)\nx\n\n[1]  3  7 11 25\n\n7*x\n\n[1]  21  49  77 175\n\nsqrt(x)\n\n[1] 1.732051 2.645751 3.316625 5.000000\n\n\n \nIf we have vectors of equal length saved in x and y, we can perform the operations x+y, x-y, xy, x/y and x^y.\n\nx = c(1,3,5)\ny = c(2,4,6,8,6,3)\n\nx+y\n\n[1]  3  7 11  9  9  8\n\nx^y\n\n[1]     1    81 15625     1   729   125\n\n\nAlso,\n\nx = c(1,2,3,4)\ny = c(2,3,0,5)\n\nx/y\n\n[1] 0.5000000 0.6666667       Inf 0.8000000\n\n\nNote that R denotes division by zero as Inf.\n \n\n\n\nData.frame\nA data.frame is a rectangular collection with variables in columns and observations in rows. In a data.frame, columns are actually vectors, each of which must have the same length.\nTo create a data.frame, we use the data.frame function:\n\nx = 12:4\ny = 8:0\nz = c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\")\n\ndat = data.frame(x,y,z) # all the vectors should be the same length.\ndat\n\n   x y z\n1 12 8 a\n2 11 7 b\n3 10 6 c\n4  9 5 d\n5  8 4 e\n6  7 3 f\n7  6 2 g\n8  5 1 h\n9  4 0 i\n\nclass(dat)\n\n[1] \"data.frame\"\n\nstr(dat)\n\n'data.frame':   9 obs. of  3 variables:\n $ x: int  12 11 10 9 8 7 6 5 4\n $ y: int  8 7 6 5 4 3 2 1 0\n $ z: chr  \"a\" \"b\" \"c\" \"d\" ...\n\n\nTherefore, we created a 9×3 data.frame.\nAlternatively, we could assign names to the variables:\n\ndat  = data.frame(\"Firs tNum\" = x,\"SecondNum\" = y, \"Letter\" = z)\n\n\ndat\n\n  Firs.tNum SecondNum Letter\n1        12         8      a\n2        11         7      b\n3        10         6      c\n4         9         5      d\n5         8         4      e\n6         7         3      f\n7         6         2      g\n8         5         1      h\n9         4         0      i\n\n\nThe nrow and ncol functions give us the number of rows and columns, respectively:\n\nnrow(dat)\n\n[1] 9\n\nncol(dat)\n\n[1] 3\n\n\n \nThe dim function gives both the number of rows and the number of columns:\n\ndim(dat) \n\n[1] 9 3\n\n\nHere the first letter is the number of rows and the second number is the number of columns.\n \nUsually, a data .frame has far too many rows to fit in one screen. In this case, we may want to view just the first few or last few rows. To this end, we use the head and the tail functions:\n\nhead(dat) # to see the top of the data set\n\n  Firs.tNum SecondNum Letter\n1        12         8      a\n2        11         7      b\n3        10         6      c\n4         9         5      d\n5         8         4      e\n6         7         3      f\n\ntail(dat) # to see the bottom of the data set\n\n  Firs.tNum SecondNum Letter\n4         9         5      d\n5         8         4      e\n6         7         3      f\n7         6         2      g\n8         5         1      h\n9         4         0      i\n\nhead(dat, n=3) # to see just the top three rows\n\n  Firs.tNum SecondNum Letter\n1        12         8      a\n2        11         7      b\n3        10         6      c\n\ntail(dat, n=4) # to see just the bottom 4 rows\n\n  Firs.tNum SecondNum Letter\n6         7         3      f\n7         6         2      g\n8         5         1      h\n9         4         0      i\n\n\n \n\nExamples:\n\nCombine the following vectors and identify the data type of each vector\n\n\nn = c(1,2,3)\ns = c(\"aa\",\"bb\",\"cc\",\"dd\",\"ff\")\nc(n,s)\n\n[1] \"1\"  \"2\"  \"3\"  \"aa\" \"bb\" \"cc\" \"dd\" \"ff\"\n\n\n \n\nHow many elements are there in the following vector:\n\n\n a = c(65,45,2,54,87,4,32,54,56,87,8,65,3,56,67,7,8765,34,3,43,65,76,\n       45,34,3,65,75,65,54,43,54,76,87,9,64,35,46,68,79,68,64,3,57,88,9,79,5)\n\nlength(a)\n\n[1] 47\n\n\n \n\n\nRecycling Rule\nIf two vectors are of unequal length, the shorter one will be recycled in order to match the longer vector. For example, the following vectors u and v have different lengths, and their sum is computed by recycling values of the shorter vector u.\n\nu = c(10,20,30)\nv = c(1,2,3,4,5,6,7,8,9)\n\nu+v\n\n[1] 11 22 33 14 25 36 17 28 39\n\n\n\nImportant : Longer object length should be a multiple of the shorter objects length.\n\n \n\n\nVector Index\n \n\ns = c(\"aa\",\"bb\",\"cc\",\"dd\",\"ff\")\n\n\nWhat is the 3rd element of s?\nWhat is the 15th element of s?\nDelete the 4th element of s\n\n\n#Answer:\n\ns[3] # Extracting 3rd element from S\n\n[1] \"cc\"\n\ns[15]\n\n[1] NA\n\ne =s[-4]\n\n \nSimilarly,\n\ns[c(2, 3)] \n\n[1] \"bb\" \"cc\"\n\ns[c(2, 3, 3)] \n\n[1] \"bb\" \"cc\" \"cc\"\n\ns[c(2, 1, 3)] \n\n[1] \"bb\" \"aa\" \"cc\"\n\ns[2:4]\n\n[1] \"bb\" \"cc\" \"dd\"\n\n\n \n\n\n\nMatrices\n \nMatrices are similar to data.frames except that all elements must be of the same type, most commonly, numeric. To construct this data structure we use the matrix function. So for example, to write the matrix;\nwe write:\n\nA = matrix(c(1,2,3,6,9,15),\n           nrow = 2,    # number of rows\n           ncol = 3,     # number of columns\n           byrow = TRUE # fill the matrix by rows\n           ) \nA\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    6    9   15\n\n\nyou can include either nrow or ncol or both.\nAn element at the mth row, nth column of A can be accessed by the expression A[m, n].\n\nA[2,3]  # extracting the element at the 2nd row, 3rd column\n\n[1] 15\n\nA[,3]  # Extracting the 3rd column\n\n[1]  3 15\n\nA[2,]  # Extracting the 2nd column\n\n[1]  6  9 15\n\nA[,c(1,3)]  # Extracting the 1st and 3rd Column\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    6   15\n\n\n \nTo get the transpose of a matrix we use:\n\nB = t(A)\nB\n\n     [,1] [,2]\n[1,]    1    6\n[2,]    2    9\n[3,]    3   15\n\n\nGiven any two matrices A and B, we can perform the operations A+B and A-B as long as the number of rows and columns agree.\n\nCombine the matrices B and C:\n\n\nC = matrix (c(4,6,8), nrow = 3)\n\ncbind(B,C)\n\n     [,1] [,2] [,3]\n[1,]    1    6    4\n[2,]    2    9    6\n[3,]    3   15    8\n\n\n\nCombine matrices B and D:\n\n\nD = matrix(c(12,53,65,77,35,98,89,85), ncol = 2, byrow = T)\n\nrbind(B,D)\n\n     [,1] [,2]\n[1,]    1    6\n[2,]    2    9\n[3,]    3   15\n[4,]   12   53\n[5,]   65   77\n[6,]   35   98\n[7,]   89   85\n\n\nTwo multiply two matrices A,B (as long as the number of columns of A is equal to the number of rows of B) we use,\n\nA%*%B\n\n     [,1] [,2]\n[1,]   14   69\n[2,]   69  342\n\n\nWe can use the colnames, rownames, nrow, ncol, and dim functions with matrices as well.\nThe function “det (A)” gives us the determinant of a matrix A, and the function “solve(A)” gives us A^(-1), the inverse of A.\n \n\nChange Working Directories\n\ngetwd()  #get current working directory\n\nsetwd(\"new path\") # Set working directory \n\nNote that the forward slash should be used as the path separator even on Windows platform.\n \n\n\nData Import\n\n#From Text\n # can use the in-built function\n\n\n#From Excel\n # can use the in-built function\n\n\n#From CSV (comma separated values)\n\n#dat_1 = read.csv(\"/Users/idassana/Desktop/for 515/Week 1/electronic-card-transactions-july-2021.csv\")"
  }
]